/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.10.2/userguide/java_library_plugin.html
 */

plugins {
    id 'base'
    id 'java-library'
    // Build Scans
    id 'com.gradle.build-scan' version '1.16'
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

dependencies {
    compile files('lib/jmathplot.jar', 'lib/jmathio.jar')

    // Use JUnit test framework
    //testImplementation 'junit:junit:4.12'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    //jcenter()
}

version = '2.1.0-beta2'

// Add sources to the jar
jar {
    from sourceSets.main.allSource
}

def visualizerMainClass = 'robot.pathfinder.tools.TrajectoryVisualizationTool'
// This task assembles the trajecotry visualizer jar
// This jar is a fat jar
task visualizerJar(type: Jar, group: 'Build', description: 'Assembles a runnable jar that runs the visualizer.') {
    dependsOn build

    // Include outputs
    from(sourceSets.main.output) {
        include '**'
        exclude '**/follower/*', '**/package-info.java'
    }
    // Add manifest attribute to make it runnable
    manifest {
        attributes 'Main-Class': visualizerMainClass
    }
    // Set archive name
    archiveName 'Trajectory-Visualizer-' + project.version + '.jar'

    // Include all dependencies in this jar
    classifier = 'all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

task copyJars(type: Copy, group: 'Archive', description: 'Copies the library jar and the visualizer jar to the output directory') {
    dependsOn build
    dependsOn visualizerJar
    from 'build/libs'
    into 'output'
}

task zipDoc(type: Zip, group: 'Archive', description: 'Zips the generated JavaDoc and puts it in the output directory') {
    dependsOn javadoc
    from 'build/docs/javadoc'
    destinationDir file('output')
    archiveName 'RobotPathfinder-Doc-' + project.version + '.zip'
}

task allArchives(group: 'Archive', description: 'Builds the project, generates the JavaDoc and jars, zips JavaDoc and copies all items to the output directory') {
    dependsOn copyJars
    dependsOn zipDoc
}
