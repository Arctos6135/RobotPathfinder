plugins {
    id 'base'
    id 'java-library'
    // Build Scans
    id 'com.gradle.build-scan' version '2.0.2'

    // For JNI
    id 'cpp'
    id 'edu.wpi.first.GradleVsCode' version '0.8.0'
    id "edu.wpi.first.GradleJni" version "0.4.1"
    id "edu.wpi.first.GradleRIO" version "2019.3.2"
}

compileJava {
    options.compilerArgs << '-Xlint:deprecation'
}

// Use Gradle 5.0 as GradleRIO only supports 5.0
wrapper {
    gradleVersion = 5.0
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

dependencies {
    // JMathPlot is needed for the graphing
    compile files('lib/jmathplot.jar', 'lib/jmathio.jar')
    // Gson is needed for the Trajectory Visualizer's saving
    compile 'com.google.code.gson:gson:2.8.5'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest:2.1'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

project.version = '2.2.0-alpha'

// Setup for Gradle-JNI
// Thanks to @ThadHouse
model {
    components {
        JniLibrary(JniNativeLibrarySpec) {
            // Target both desktop (for development) and roboRIO
            targetPlatform wpi.platforms.desktop
            targetPlatform wpi.platforms.roborio
            javaCompileTasks << compileJava // set javaCompileTasks to any java compile tasks that contain your JNI classes. It is a list of tasks
            jniCrossCompileOptions << JniCrossCompileOptions(wpi.platforms.roborio)
            // Include C++ sources
            sources.cpp {
                source {
                    srcDir 'src/main/cpp'
                    include '**/*.cpp', '**/*.cc'
                }
                exportedHeaders {
                    srcDir 'src/main/cpp/include'
                }
            }
            binaries.all {
                // Don't build static libraries
                if (it instanceof StaticLibraryBinarySpec) {
                    it.buildable = false
                }
                if (it.targetPlatform.name.contains(wpi.platforms.roborio)) {
                    useLibrary(it, "wpilibjni")
                } else {
                    useLibrary(it, "wpilibjni_common")
                }
            }
        }
    }
}

// Add sources to the jar
jar {
    from sourceSets.main.allSource
    
    archiveName 'RobotPathfinder-' + project.version + '.jar'
}

def visualizerMainClass = 'robot.pathfinder.tools.TrajectoryVisualizationTool'
// This task assembles the trajecotry visualizer jar
// This jar is a fat jar
task visualizerJar(type: Jar, group: 'Build', description: 'Assembles a runnable jar that runs the visualizer.') {
    dependsOn build

    // Include outputs
    from(sourceSets.main.output) {
        include '**'
        exclude '**/follower/*', '**/package-info.java'
    }
    // Add manifest attribute to make it runnable
    manifest {
        attributes 'Main-Class': visualizerMainClass
    }
    // Set archive name
    archiveName 'Trajectory-Visualizer-' + project.version + '.jar'

    // Include all dependencies in this jar
    classifier = 'all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

task updateJNIHeaders(type: Copy, group: 'Development', description: 'Copies JNI generated headers into the JNI headers directory.') {
    dependsOn build

    from 'build/jniinclude/compileJava'
    into 'src/main/cpp/include/jni'
}

task fatJar(type: Jar, group: 'Build', description: 'Assembles a jar of the library, including the libraries for the Grapher class.') {
    dependsOn build

    archiveName 'RobotPathfinder-' + project.version + '-all.jar'

    // Collect all
    classifier = 'all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

    with jar
}

task copyJars(type: Copy, group: 'Archive', description: 'Copies all generated jars to the output directory.') {
    dependsOn jar
    dependsOn fatJar
    dependsOn visualizerJar
    from 'build/libs'
    into 'output'
}

task zipDoc(type: Zip, group: 'Archive', description: 'Zips the generated JavaDoc and puts it in the output directory.') {
    dependsOn javadoc
    from 'build/docs/javadoc'
    destinationDir file('output')
    archiveName 'RobotPathfinder-Doc-' + project.version + '.zip'
}

task allArchives(group: 'Archive', description: 'Builds the project, generates the JavaDoc and jars, zips JavaDoc and copies all items to the output directory.') {
    dependsOn jar
    dependsOn visualizerJar
    dependsOn fatJar
    dependsOn copyJars
    dependsOn zipDoc
}
